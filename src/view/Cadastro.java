package view;

import java.awt.List;
import java.util.Arrays;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import DAO.DadosDAO;
import bancoDados.Conexao;
import java.sql.PreparedStatement;
import bancoDados.Conexao;
import controller.CadastroController;
import java.awt.Image;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import java.util.Date;
import model.Dados;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import javax.swing.JComboBox;

/**
 *
 * @author paloma
 */
public class Cadastro extends javax.swing.JFrame {

    private CadastroController cadastroController;
    private boolean mostrarValores = true;
    private ArrayList<Integer> listaIds = new ArrayList<>();

    public Cadastro() {

        Image icone = Toolkit.getDefaultToolkit().getImage(getClass().getClassLoader().getResource("model/icone.png"));
        setIconImage(icone);
        initComponents();

        Conexao conexao = new Conexao();
        DadosDAO dadosDAO = new DadosDAO(conexao);

        // Instanciar o CadastroController
        cadastroController = new CadastroController(dadosDAO);
        carregarDadosTabela();

        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String dataFormatada = LocalDate.now().format(formato);

        tfDataCadastro.setText(dataFormatada);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblNome = new javax.swing.JLabel();
        lblClassificacao = new javax.swing.JLabel();
        lblDataEntrada = new javax.swing.JLabel();
        btnCadastro = new javax.swing.JButton();
        btnApagar = new javax.swing.JButton();
        lblGanho = new javax.swing.JLabel();
        tfNome = new javax.swing.JTextField();
        tfData = new javax.swing.JTextField();
        btnGastos = new javax.swing.JButton();
        tfDataCadastro = new javax.swing.JTextField();
        lblData1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnSalvar = new javax.swing.JButton();
        btnGanho1 = new javax.swing.JButton();
        cbClassificacao = new javax.swing.JComboBox<>();
        btnSair = new javax.swing.JButton();
        tfValor = new javax.swing.JTextField();
        lblValor1 = new javax.swing.JLabel();
        btnAtualizar = new javax.swing.JButton();
        lbliconeApagar = new javax.swing.JLabel();
        lbliconeAtualizar = new javax.swing.JLabel();
        lbliconSalvar = new javax.swing.JLabel();
        lbliconeCadastro3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbprodutos = new javax.swing.JTable();
        lblSaldo = new javax.swing.JLabel();
        btnSaldo = new javax.swing.JButton();
        lblRecebidos = new javax.swing.JLabel();
        btnDespesas = new javax.swing.JButton();
        lblDespesas = new javax.swing.JLabel();
        btnMostrarOcultar = new javax.swing.JButton();
        btnRecebidos1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Controle Financeiro");
        setBackground(new java.awt.Color(102, 102, 102));

        jPanel1.setBackground(new java.awt.Color(23, 93, 165));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        lblNome.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblNome.setForeground(new java.awt.Color(255, 255, 255));
        lblNome.setText("Nome:");

        lblClassificacao.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblClassificacao.setForeground(new java.awt.Color(255, 255, 255));
        lblClassificacao.setText("Classificação:");

        lblDataEntrada.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblDataEntrada.setForeground(new java.awt.Color(255, 255, 255));
        lblDataEntrada.setText("Data Entrada:");

        btnCadastro.setBackground(new java.awt.Color(217, 232, 255));
        btnCadastro.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnCadastro.setForeground(new java.awt.Color(0, 51, 153));
        btnCadastro.setText("Cadastrar");
        btnCadastro.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCadastro.setBorderPainted(false);
        btnCadastro.setMaximumSize(new java.awt.Dimension(65, 22));
        btnCadastro.setMinimumSize(new java.awt.Dimension(65, 22));
        btnCadastro.setPreferredSize(new java.awt.Dimension(65, 22));
        btnCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastroActionPerformed(evt);
            }
        });

        btnApagar.setBackground(new java.awt.Color(217, 232, 255));
        btnApagar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnApagar.setForeground(new java.awt.Color(0, 51, 153));
        btnApagar.setText("Apagar");
        btnApagar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnApagar.setBorderPainted(false);
        btnApagar.setMaximumSize(new java.awt.Dimension(65, 22));
        btnApagar.setMinimumSize(new java.awt.Dimension(65, 22));
        btnApagar.setPreferredSize(new java.awt.Dimension(65, 22));
        btnApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApagarActionPerformed(evt);
            }
        });

        lblGanho.setBackground(new java.awt.Color(0, 204, 153));

        tfNome.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfNome.setMaximumSize(new java.awt.Dimension(68, 22));
        tfNome.setMinimumSize(new java.awt.Dimension(68, 22));
        tfNome.setPreferredSize(new java.awt.Dimension(68, 22));
        tfNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNomeActionPerformed(evt);
            }
        });

        tfData.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDataActionPerformed(evt);
            }
        });

        btnGastos.setBackground(new java.awt.Color(204, 51, 0));
        btnGastos.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnGastos.setForeground(new java.awt.Color(255, 255, 255));
        btnGastos.setText("Gastos(-)");
        btnGastos.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnGastos.setBorderPainted(false);

        tfDataCadastro.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfDataCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDataCadastroActionPerformed(evt);
            }
        });

        lblData1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblData1.setForeground(new java.awt.Color(255, 255, 255));
        lblData1.setText("Cadastro:");

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Sistema de Controle Financeiro ");

        btnSalvar.setBackground(new java.awt.Color(217, 232, 255));
        btnSalvar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(0, 51, 153));
        btnSalvar.setText("Salvar");
        btnSalvar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSalvar.setBorderPainted(false);
        btnSalvar.setMaximumSize(new java.awt.Dimension(65, 22));
        btnSalvar.setMinimumSize(new java.awt.Dimension(65, 22));
        btnSalvar.setPreferredSize(new java.awt.Dimension(65, 22));
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnGanho1.setBackground(new java.awt.Color(51, 153, 0));
        btnGanho1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnGanho1.setForeground(new java.awt.Color(255, 255, 255));
        btnGanho1.setText("Ganho(+)");
        btnGanho1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnGanho1.setBorderPainted(false);

        cbClassificacao.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cbClassificacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alimentação", "Automóvel", "Saúde", "Bem estar", "Investimento", "Outros", "Compras", "Casa", "Salário", "Renda extra", "Mesada", "Freelancer" }));
        cbClassificacao.setMaximumSize(new java.awt.Dimension(117, 22));
        cbClassificacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClassificacaoActionPerformed(evt);
            }
        });

        btnSair.setBackground(new java.awt.Color(217, 232, 255));
        btnSair.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnSair.setForeground(new java.awt.Color(0, 51, 153));
        btnSair.setText("Sair");
        btnSair.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSair.setBorderPainted(false);
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        tfValor.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfValor.setMaximumSize(new java.awt.Dimension(64, 22));
        tfValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfValorActionPerformed(evt);
            }
        });

        lblValor1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblValor1.setForeground(new java.awt.Color(255, 255, 255));
        lblValor1.setText("Valor:");

        btnAtualizar.setBackground(new java.awt.Color(217, 232, 255));
        btnAtualizar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnAtualizar.setForeground(new java.awt.Color(0, 51, 153));
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAtualizar.setBorderPainted(false);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        lbliconeApagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/model/apagar.png"))); // NOI18N

        lbliconeAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/model/atualizar.png"))); // NOI18N

        lbliconSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/model/salvar.png"))); // NOI18N

        lbliconeCadastro3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/model/icon-adicionar.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(271, Short.MAX_VALUE)
                                .addComponent(lblGanho)
                                .addGap(566, 566, 566))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblClassificacao)
                                    .addComponent(cbClassificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(57, 57, 57)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(tfValor, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbliconeCadastro3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(lbliconeAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(btnApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lbliconeApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lbliconSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(143, 143, 143))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblValor1)
                                        .addGap(142, 142, 142)
                                        .addComponent(jLabel1)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblData1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDataEntrada))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnGanho1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnGastos, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(64, 64, 64))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblGanho)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnSair))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblNome)
                                    .addComponent(lblValor1))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblClassificacao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbClassificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblData1)
                                    .addComponent(tfDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDataEntrada)
                                    .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnGastos, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGanho1)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnCadastro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbliconeCadastro3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnApagar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(lbliconeApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbliconSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbliconeAtualizar)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );

        tbprodutos.setAutoCreateRowSorter(true);
        tbprodutos.setBackground(new java.awt.Color(23, 93, 165));
        tbprodutos.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tbprodutos.setForeground(new java.awt.Color(255, 255, 255));
        tbprodutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Classificação", "Valor", "Data", "Cadastro"
            }
        ));
        tbprodutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbprodutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbprodutos);

        lblSaldo.setText("R$");

        btnSaldo.setBackground(new java.awt.Color(217, 232, 255));
        btnSaldo.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnSaldo.setForeground(new java.awt.Color(0, 51, 153));
        btnSaldo.setText("Saldo disponível");
        btnSaldo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSaldo.setBorderPainted(false);
        btnSaldo.setMaximumSize(new java.awt.Dimension(129, 22));
        btnSaldo.setMinimumSize(new java.awt.Dimension(129, 22));
        btnSaldo.setPreferredSize(new java.awt.Dimension(129, 22));
        btnSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaldoActionPerformed(evt);
            }
        });

        lblRecebidos.setText("R$");

        btnDespesas.setBackground(new java.awt.Color(217, 232, 255));
        btnDespesas.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnDespesas.setForeground(new java.awt.Color(0, 51, 153));
        btnDespesas.setText("Total de Despesas");
        btnDespesas.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDespesas.setBorderPainted(false);
        btnDespesas.setMaximumSize(new java.awt.Dimension(129, 22));
        btnDespesas.setMinimumSize(new java.awt.Dimension(129, 22));
        btnDespesas.setPreferredSize(new java.awt.Dimension(129, 22));
        btnDespesas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDespesasActionPerformed(evt);
            }
        });

        lblDespesas.setText("R$");

        btnMostrarOcultar.setBackground(new java.awt.Color(217, 232, 255));
        btnMostrarOcultar.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        btnMostrarOcultar.setForeground(new java.awt.Color(0, 51, 153));
        btnMostrarOcultar.setText("Mostrar  Valores");
        btnMostrarOcultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarOcultarActionPerformed(evt);
            }
        });

        btnRecebidos1.setBackground(new java.awt.Color(217, 232, 255));
        btnRecebidos1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnRecebidos1.setForeground(new java.awt.Color(0, 51, 153));
        btnRecebidos1.setText("Valores recebidos:");
        btnRecebidos1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRecebidos1.setBorderPainted(false);
        btnRecebidos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecebidos1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1057, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMostrarOcultar)
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRecebidos, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRecebidos1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(94, 94, 94)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDespesas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDespesas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 5, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnMostrarOcultar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblRecebidos, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDespesas, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRecebidos1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDespesas, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastroActionPerformed
        String nome = tfNome.getText().trim();
        String classificacao = cbClassificacao.getSelectedItem().toString().trim();
        String valorText = tfValor.getText().trim();
        String dataText = tfData.getText().trim();
        String dataCadastroText = tfDataCadastro.getText().trim();

        // Validação dos campos obrigatórios
        if (nome.isEmpty() || classificacao.isEmpty() || valorText.isEmpty()
                || dataText.isEmpty() || dataCadastroText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validação para garantir que o nome não contenha números
        if (!isNomeValido(nome)) {
            JOptionPane.showMessageDialog(this, "O campo 'Nome' não pode conter números!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double valor = Double.parseDouble(valorText);  // Verifica se o valor é numérico

            DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            LocalDate data = LocalDate.parse(dataText, formato);
            LocalDate dataCadastro = LocalDate.parse(dataCadastroText, formato);

            // Gerar o próximo ID disponível
            int id = listaIds.isEmpty() ? 1 : listaIds.get(listaIds.size() - 1) + 1;
            listaIds.add(id); // Adicionar o ID gerado à lista de IDs

            // Adicionar dados ao controlador
            cadastroController.addDados(id, nome, classificacao, valor, data, dataCadastro);

            // Limpar campos
            tfNome.setText("");
            tfValor.setText("");
            tfDataCadastro.setText("");
            tfData.setText("");

            // Formatar as datas para exibição no formato "dd-MM-yyyy"
            String dataFormatada = data.format(formato);
            String dataCadastroFormatada = dataCadastro.format(formato);

            // Atualizar a tabela
            DefaultTableModel tbProdutos = (DefaultTableModel) tbprodutos.getModel();
            Object[] novaLinha = {
                id, // Adiciona o ID como a primeira coluna
                nome,
                classificacao,
                valor,
                dataFormatada, // Exibe a data formatada
                dataCadastroFormatada // Exibe a data de cadastro formatada
            };
            tbProdutos.addRow(novaLinha);

            JOptionPane.showMessageDialog(this, "Dados inseridos com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

            atualizarValores();

        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de data inválido! Por favor, use o formato dd-MM-yyyy.", "Erro de Data", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor inválido! O campo 'valor' deve conter apenas números. Se for um valor decimal, utilize o ponto (.) como separador.", "Erro de Valor", JOptionPane.ERROR_MESSAGE);
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(this, "Erro ao inserir dados: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnCadastroActionPerformed

    private void tfNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNomeActionPerformed
        // TODO add youndling code here:
    }//GEN-LAST:event_tfNomeActionPerformed

    private void btnApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApagarActionPerformed
        int selectedRow = tbprodutos.getSelectedRow();

        if (selectedRow != -1) {
            // Pergunta ao usuário se ele realmente deseja excluir o produto
            int confirm = JOptionPane.showConfirmDialog(null,
                    "Você tem certeza que deseja excluir este produto?",
                    "Confirmação de Exclusão",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Obtenha o ID do produto a partir do ArrayList de IDs
                int idProduto = listaIds.get(selectedRow);

                // Tenta excluir o produto usando o controlador
                try {
                    // Remove o produto pelo ID usando o cadastroController
                    cadastroController.removeDados(idProduto);

                    // Remove o ID do ArrayList e a linha da tabela
                    listaIds.remove(selectedRow);
                    DefaultTableModel tbProdutos = (DefaultTableModel) tbprodutos.getModel();
                    tbProdutos.removeRow(selectedRow);

                    // Limpa os campos de texto
                    tfNome.setText("");
                    tfValor.setText("");
                    tfDataCadastro.setText("");
                    tfData.setText("");

                    JOptionPane.showMessageDialog(this, "Produto excluído com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

                    atualizarValores();
                } catch (RuntimeException e) {
                    JOptionPane.showMessageDialog(this, "Erro ao excluir produto: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nenhuma linha selecionada para remover.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnApagarActionPerformed

    private void tbprodutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbprodutosMouseClicked

        if (tbprodutos.getSelectedRow() != -1) {
            tfNome.setText(tbprodutos.getValueAt(tbprodutos.getSelectedRow(), 1).toString());
            cbClassificacao.setSelectedItem(tbprodutos.getValueAt(tbprodutos.getSelectedRow(), 2).toString());
            tfValor.setText(tbprodutos.getValueAt(tbprodutos.getSelectedRow(), 3).toString());
            tfData.setText(tbprodutos.getValueAt(tbprodutos.getSelectedRow(), 4).toString());
            tfDataCadastro.setText(tbprodutos.getValueAt(tbprodutos.getSelectedRow(), 5).toString());
        }

    }//GEN-LAST:event_tbprodutosMouseClicked

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        JOptionPane.showMessageDialog(this, "Dados salvos com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaldoActionPerformed

    }//GEN-LAST:event_btnSaldoActionPerformed

    private void btnDespesasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDespesasActionPerformed

    }//GEN-LAST:event_btnDespesasActionPerformed

    private void tfDataCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDataCadastroActionPerformed

    }//GEN-LAST:event_tfDataCadastroActionPerformed

    private void cbClassificacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClassificacaoActionPerformed

    }//GEN-LAST:event_cbClassificacaoActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void tfDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDataActionPerformed

    }//GEN-LAST:event_tfDataActionPerformed

    private void btnMostrarOcultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarOcultarActionPerformed
        if (mostrarValores) {
            // Exibir os valores

            // Calcula o total de despesas
            double totalDespesas = 0.0;
            double totalRecebidos = 0.0;

            String[] categoriasDespesas = {
                "Alimentação", "Automóvel", "Saúde", "Bem estar", "Investimento", "Outros", "Compras", "Casa"
            };

            String[] categoriasRecebidos = {
                "Salário", "Renda extra", "Mesada", "Freelancer"
            };

            DefaultTableModel tbProdutos = (DefaultTableModel) tbprodutos.getModel();
            for (int i = 0; i < tbProdutos.getRowCount(); i++) {
                String classificacao = (String) tbProdutos.getValueAt(i, 2); // Coluna 1: Classificação
                Object valorObj = tbProdutos.getValueAt(i, 3); // Coluna 2: Valor

                try {
                    double valor;
                    if (valorObj instanceof Double) {
                        valor = (Double) valorObj;
                    } else if (valorObj instanceof String && isNumeric((String) valorObj)) {
                        valor = Double.parseDouble((String) valorObj);
                    } else {
                        continue; // Pula para a próxima iteração se não for um número válido
                    }

                    // Verifica se é uma categoria de despesas ou recebidos
                    if (Arrays.asList(categoriasRecebidos).contains(classificacao)) {
                        totalRecebidos += valor;
                    } else if (Arrays.asList(categoriasDespesas).contains(classificacao)) {
                        totalDespesas += valor;
                    }
                } catch (NumberFormatException e) {

                }
            }

            // Calcula o saldo disponível
            double saldoDisponivel = totalRecebidos - totalDespesas;

            // Atualiza os rótulos com os valores
            lblRecebidos.setText("R$ " + String.format("%.2f", totalRecebidos));
            lblDespesas.setText("R$ " + String.format("%.2f", totalDespesas));
            lblSaldo.setText("R$ " + String.format("%.2f", saldoDisponivel));

            // Altera o texto do botão para "Ocultar"
            btnMostrarOcultar.setText("Ocultar Valores");
        } else {
            // Ocultar os valores
            lblRecebidos.setText("");
            lblDespesas.setText("");
            lblSaldo.setText("");

            // Altera o texto do botão para "Mostrar"
            btnMostrarOcultar.setText("Mostrar Valores");
        }

        // Alterna o estado
        mostrarValores = !mostrarValores;

    }//GEN-LAST:event_btnMostrarOcultarActionPerformed

    private void btnRecebidos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecebidos1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRecebidos1ActionPerformed

    private void tfValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfValorActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        int selectedRow = tbprodutos.getSelectedRow();

        if (selectedRow != -1) {
            // Pergunta ao usuário se ele realmente deseja atualizar o produto
            int confirm = JOptionPane.showConfirmDialog(null,
                    "Você tem certeza que deseja atualizar este registro?",
                    "Confirmação de Atualização",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Obtenha o ID do produto a partir do ArrayList de IDs
                int id = listaIds.get(selectedRow);

                // Obtenha os novos valores dos campos de texto
                String nome = tfNome.getText().trim();
                String classificacao = cbClassificacao.getSelectedItem().toString().trim();
                String valorText = tfValor.getText().trim();
                String dataText = tfData.getText().trim();
                String dataCadastroText = tfDataCadastro.getText().trim();

                // Tenta atualizar o produto usando o controlador
                try {
                    // Converte o valor para double
                    double valor = Double.parseDouble(valorText);

                    // Converte as strings de data para LocalDate
                    LocalDate data = LocalDate.parse(dataText, DateTimeFormatter.ofPattern("dd-MM-yyyy"));
                    LocalDate dataCadastro = LocalDate.parse(dataCadastroText, DateTimeFormatter.ofPattern("dd-MM-yyyy"));

                    // Atualiza o produto pelo ID usando o cadastroController
                    cadastroController.updateDados(id, nome, classificacao, valor, data, dataCadastro);

                    // Atualiza a linha da tabela
                    DefaultTableModel tbProdutos = (DefaultTableModel) tbprodutos.getModel();
                    tbProdutos.setValueAt(nome, selectedRow, 1);
                    tbProdutos.setValueAt(classificacao, selectedRow, 2);
                    tbProdutos.setValueAt(valorText, selectedRow, 3);
                    tbProdutos.setValueAt(dataCadastro.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")), selectedRow, 4);
                    tbProdutos.setValueAt(data.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")), selectedRow, 5);

                    JOptionPane.showMessageDialog(this, "Registro atualizado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

                    atualizarValores();
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Erro ao converter valor: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                } catch (DateTimeParseException e) {
                    JOptionPane.showMessageDialog(this, "Erro ao converter datas: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                } catch (RuntimeException e) {
                    JOptionPane.showMessageDialog(this, "Erro ao atualizar registro: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nenhuma linha selecionada para atualizar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnAtualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cadastro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApagar;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastro;
    private javax.swing.JButton btnDespesas;
    private javax.swing.JButton btnGanho1;
    private javax.swing.JButton btnGastos;
    private javax.swing.JButton btnMostrarOcultar;
    private javax.swing.JButton btnRecebidos1;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSaldo;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<String> cbClassificacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClassificacao;
    private javax.swing.JLabel lblData1;
    private javax.swing.JLabel lblDataEntrada;
    private javax.swing.JLabel lblDespesas;
    private javax.swing.JLabel lblGanho;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblRecebidos;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblValor1;
    private javax.swing.JLabel lbliconSalvar;
    private javax.swing.JLabel lbliconeApagar;
    private javax.swing.JLabel lbliconeAtualizar;
    private javax.swing.JLabel lbliconeCadastro3;
    private javax.swing.JTable tbprodutos;
    private javax.swing.JTextField tfData;
    private javax.swing.JTextField tfDataCadastro;
    private javax.swing.JTextField tfNome;
    private javax.swing.JTextField tfValor;
    // End of variables declaration//GEN-END:variables

    private void carregarDadosTabela() {

        DefaultTableModel modelo = (DefaultTableModel) tbprodutos.getModel();
        modelo.setRowCount(0);
        listaIds.clear(); // Limpar a lista de IDs para evitar duplicatas

        // Conexão com o banco de dados
        Conexao conexao = new Conexao();
        DadosDAO dadosDAO = new DadosDAO(conexao);

        if (conexao.getConexao() != null) {
            try {
                ArrayList<Dados> listaDados = dadosDAO.consultar();

                // Formato para a data
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

                // Percorre a lista de dados e adiciona na tabela
                for (Dados dados : listaDados) {
                    // Armazena o ID na lista
                    listaIds.add(dados.getId());

                    // Adiciona os dados do produto na tabela
                    Object[] linha = {
                        dados.getId(),
                        dados.getNome(),
                        dados.getClassificacao(),
                        dados.getValor(),
                        dados.getData().format(formatter), // Formata a data
                        dados.getDataCadastro().format(formatter) // Formata a data de cadastro
                    };
                    modelo.addRow(linha);
                }
                // Ocultar a primeira coluna
                tbprodutos.getColumnModel().getColumn(0).setMinWidth(0);
                tbprodutos.getColumnModel().getColumn(0).setMaxWidth(0);
                tbprodutos.getColumnModel().getColumn(0).setPreferredWidth(0); // Opcional, para definir uma largura preferida de 0

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao carregar os dados: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Falha na conexão com o banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void atualizarValores() {
        double totalRecebidos = 0.0;
        double totalDespesas = 0.0;

        String[] categoriasRecebidos = {"Salário", "Renda extra", "Mesada", "Freelancer"};
        String[] categoriasDespesas = {
            "Alimentação", "Automóvel", "Saúde", "Bem estar", "Investimento", "Outros", "Compras", "Casa"
        };

        DefaultTableModel tbProdutos = (DefaultTableModel) tbprodutos.getModel();
        for (int i = 0; i < tbProdutos.getRowCount(); i++) {
            String classificacao = (String) tbProdutos.getValueAt(i, 2); // Coluna 1: Classificação
            Object valorObj = tbProdutos.getValueAt(i, 3); // Coluna 2: Valor

            try {
                double valor;
                if (valorObj instanceof Double) {
                    valor = (Double) valorObj;
                } else if (valorObj instanceof String) {
                    valor = Double.parseDouble((String) valorObj);
                } else {
                    continue;
                }

                if (Arrays.asList(categoriasRecebidos).contains(classificacao)) {
                    totalRecebidos += valor;
                } else if (Arrays.asList(categoriasDespesas).contains(classificacao)) {
                    totalDespesas += valor;
                }
            } catch (NumberFormatException e) {
                System.out.println("Erro ao converter valor: " + valorObj);
            }
        }

        // Calcula o saldo disponível
        double saldoDisponivel = totalRecebidos - totalDespesas;

        // Atualiza os rótulos com os valores formatados
        lblRecebidos.setText("R$ " + String.format("%.2f", totalRecebidos));
        lblDespesas.setText("R$ " + String.format("%.2f", totalDespesas));
        lblSaldo.setText("R$ " + String.format("%.2f", saldoDisponivel));
    }

    private boolean isNomeValido(String nome) {
        return nome.matches("[a-zA-ZÀ-ÿ\\s]+"); // Permite letras e espaços 
    }

    private boolean isNumeric(String str) {
        if (str == null) {
            return false;
        }
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

}
